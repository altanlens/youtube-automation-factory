#!/usr/bin/env node\n/**\n * Excalidraw Demo Script\n * Demonstrates the Excalidraw schema implementation\n */\n\nconst {\n  createExcalidrawFile,\n  newTextElement,\n  newRectangleElement,\n  newArrowElement,\n  serializeAsJSON,\n  validateExcalidrawFile,\n} = require('../src/excalidraw');\nconst { pointFrom } = require('../src/excalidraw/types/math');\nconst fs = require('fs');\nconst path = require('path');\n\n/**\n * Creates a demo Excalidraw drawing\n */\nfunction createDemoDrawing() {\n  console.log('üé® Creating Excalidraw demo...');\n\n  const elements = [];\n\n  // Title\n  const titleElement = newTextElement({\n    x: 400,\n    y: 100,\n    text: 'YouTube Automation Factory',\n    fontSize: 32,\n    fontFamily: 5, // Excalifont\n    strokeColor: '#1e40af',\n  });\n  elements.push(titleElement);\n\n  // Subtitle\n  const subtitleElement = newTextElement({\n    x: 450,\n    y: 160,\n    text: 'Excalidraw Integration Demo',\n    fontSize: 20,\n    fontFamily: 5,\n    strokeColor: '#64748b',\n  });\n  elements.push(subtitleElement);\n\n  // Main container\n  const containerRect = newRectangleElement({\n    x: 200,\n    y: 220,\n    width: 600,\n    height: 400,\n    strokeColor: '#1e40af',\n    backgroundColor: '#f1f5f9',\n    fillStyle: 'solid',\n    strokeWidth: 3,\n  });\n  elements.push(containerRect);\n\n  // Process steps\n  const steps = [\n    'AI Analysis',\n    'JSON Schema',\n    'Excalidraw Render',\n    'Video Export'\n  ];\n\n  steps.forEach((step, index) => {\n    const y = 280 + (index * 80);\n    \n    // Step box\n    const stepBox = newRectangleElement({\n      x: 250,\n      y: y,\n      width: 200,\n      height: 50,\n      strokeColor: '#059669',\n      backgroundColor: '#ecfdf5',\n      fillStyle: 'solid',\n      strokeWidth: 2,\n    });\n    elements.push(stepBox);\n    \n    // Step text\n    const stepText = newTextElement({\n      x: 260,\n      y: y + 15,\n      text: step,\n      fontSize: 16,\n      fontFamily: 5,\n      strokeColor: '#065f46',\n    });\n    elements.push(stepText);\n    \n    // Arrow to next step (except for last)\n    if (index < steps.length - 1) {\n      const arrow = newArrowElement({\n        x: 350,\n        y: y + 50,\n        points: [pointFrom(0, 0), pointFrom(0, 30)],\n        strokeColor: '#1e40af',\n        strokeWidth: 2,\n        endArrowhead: 'arrow',\n      });\n      elements.push(arrow);\n    }\n  });\n\n  // Features list\n  const featuresTitle = newTextElement({\n    x: 520,\n    y: 280,\n    text: 'Features:',\n    fontSize: 18,\n    fontFamily: 5,\n    strokeColor: '#1e40af',\n  });\n  elements.push(featuresTitle);\n\n  const features = [\n    '‚úÖ Official Schema Compatible',\n    '‚úÖ TypeScript Support',\n    '‚úÖ Element Validation',\n    '‚úÖ Serialization Utils',\n    '‚úÖ Animation Support'\n  ];\n\n  features.forEach((feature, index) => {\n    const featureText = newTextElement({\n      x: 520,\n      y: 310 + (index * 25),\n      text: feature,\n      fontSize: 14,\n      fontFamily: 2, // Helvetica\n      strokeColor: '#374151',\n    });\n    elements.push(featureText);\n  });\n\n  // Create app state\n  const appState = {\n    viewBackgroundColor: '#ffffff',\n    gridSize: 20,\n    theme: 'light',\n    exportBackground: true,\n  };\n\n  // Create the file\n  const excalidrawFile = createExcalidrawFile(elements, appState, {});\n  \n  return excalidrawFile;\n}\n\n/**\n * Main demo function\n */\nfunction runDemo() {\n  try {\n    console.log('üöÄ Starting Excalidraw Schema Demo');\n    console.log('=====================================');\n\n    // Create demo drawing\n    const drawing = createDemoDrawing();\n    \n    // Validate the drawing\n    console.log('\\nüîç Validating Excalidraw file...');\n    const isValid = validateExcalidrawFile(drawing);\n    \n    if (isValid) {\n      console.log('‚úÖ Validation passed!');\n    } else {\n      console.log('‚ùå Validation failed!');\n      return;\n    }\n    \n    // Serialize to JSON\n    console.log('\\nüìÑ Serializing to JSON...');\n    const jsonData = serializeAsJSON(drawing.elements, drawing.appState, drawing.files);\n    \n    // Ensure output directory exists\n    const outputDir = path.join(__dirname, '..', 'output', 'excalidraw-demos');\n    if (!fs.existsSync(outputDir)) {\n      fs.mkdirSync(outputDir, { recursive: true });\n    }\n    \n    // Save to file\n    const outputPath = path.join(outputDir, 'youtube-automation-demo.excalidraw');\n    fs.writeFileSync(outputPath, jsonData, 'utf8');\n    \n    console.log('‚úÖ Demo file created successfully!');\n    console.log(`üìÅ Output: ${outputPath}`);\n    \n    // Display stats\n    console.log('\\nüìä Demo Statistics:');\n    console.log(`   Elements: ${drawing.elements.length}`);\n    console.log(`   File Size: ${(jsonData.length / 1024).toFixed(2)} KB`);\n    console.log(`   Version: ${drawing.version}`);\n    \n    console.log('\\nüéâ Demo completed successfully!');\n    console.log('\\nYou can now:');\n    console.log('1. Open the .excalidraw file in https://excalidraw.com');\n    console.log('2. Import it into your Excalidraw instance');\n    console.log('3. Use it as a template for video generation');\n    \n  } catch (error) {\n    console.error('‚ùå Demo failed:', error.message);\n    if (error.stack) {\n      console.error(error.stack);\n    }\n    process.exit(1);\n  }\n}\n\n// Command line interface\nif (require.main === module) {\n  const args = process.argv.slice(2);\n  \n  if (args.includes('--help') || args.includes('-h')) {\n    console.log(`\nExcalidraw Demo Script\n\nUsage: node scripts/demo-excalidraw.js [options]\n\nOptions:\n  --help, -h     Show this help message\n  \nThis script creates a demo Excalidraw file showcasing the schema implementation.\n`);\n    process.exit(0);\n  }\n  \n  runDemo();\n}\n\nmodule.exports = {\n  createDemoDrawing,\n  runDemo,\n};