/**\n * Analysis JSON to Excalidraw Integration\n * Converts our analysis.json format to Excalidraw compatible data\n */\n\nimport type {\n  ExcalidrawFile,\n  ExcalidrawElement,\n  ExcalidrawAppState,\n  ExcalidrawTextElement,\n  ExcalidrawRectangleElement,\n  ExcalidrawArrowElement,\n  LocalPoint,\n} from \"../excalidraw/types\";\nimport {\n  createExcalidrawFile,\n  newTextElement,\n  newRectangleElement,\n  newArrowElement,\n} from \"../excalidraw\";\nimport { pointFrom } from \"../excalidraw/types/math\";\nimport { COLOR_PALETTE } from \"../excalidraw/constants\";\n\n/**\n * Our Analysis JSON Schema (simplified)\n */\ninterface AnalysisJson {\n  version: string;\n  metadata: {\n    title: string;\n    description: string;\n    duration: number;\n    style: 'educational' | 'business' | 'motivational' | 'technical';\n    language: string;\n  };\n  scenes: SceneData[];\n  audio?: {\n    narration: string;\n    backgroundMusic?: string;\n    volume: number;\n  };\n}\n\ninterface SceneData {\n  id: string;\n  type: 'excalidraw' | 'text' | 'chart' | 'transition';\n  start: number;\n  duration: number;\n  data: any;\n  animation?: {\n    type: 'progressive-draw' | 'fade-in' | 'slide-in' | 'none';\n    speed: 'slow' | 'normal' | 'fast';\n    delay?: number;\n  };\n  audio?: {\n    narration?: string;\n    soundEffect?: string;\n  };\n}\n\n/**\n * Converts analysis.json to Excalidraw format\n */\nexport function convertAnalysisToExcalidraw(\n  analysisData: AnalysisJson\n): ExcalidrawFile[] {\n  const excalidrawFiles: ExcalidrawFile[] = [];\n\n  // Process each scene\n  for (const scene of analysisData.scenes) {\n    if (scene.type === 'excalidraw') {\n      const elements = createElementsFromScene(scene, analysisData.metadata.style);\n      const appState = createAppStateFromStyle(analysisData.metadata.style);\n      \n      const excalidrawFile = createExcalidrawFile(elements, appState, {});\n      excalidrawFiles.push(excalidrawFile);\n    }\n  }\n\n  return excalidrawFiles;\n}\n\n/**\n * Creates Excalidraw elements from scene data\n */\nfunction createElementsFromScene(\n  scene: SceneData,\n  style: string\n): ExcalidrawElement[] {\n  const elements: ExcalidrawElement[] = [];\n  const sceneData = scene.data;\n\n  // Example: Simple scene with title and content\n  if (sceneData.title) {\n    const titleElement = newTextElement({\n      x: 100,\n      y: 100,\n      text: sceneData.title,\n      fontSize: 32,\n      fontFamily: 5, // Excalifont\n      strokeColor: getColorForStyle(style, 'primary'),\n    });\n    elements.push(titleElement);\n  }\n\n  if (sceneData.content && Array.isArray(sceneData.content)) {\n    sceneData.content.forEach((text: string, index: number) => {\n      const contentElement = newTextElement({\n        x: 100,\n        y: 200 + (index * 60),\n        text: text,\n        fontSize: 20,\n        fontFamily: 5,\n        strokeColor: getColorForStyle(style, 'secondary'),\n      });\n      elements.push(contentElement);\n    });\n  }\n\n  // Add background rectangle\n  const backgroundRect = newRectangleElement({\n    x: 50,\n    y: 50,\n    width: 1820,\n    height: 980,\n    strokeColor: getColorForStyle(style, 'border'),\n    backgroundColor: getColorForStyle(style, 'background'),\n    fillStyle: 'solid',\n    strokeWidth: 2,\n  });\n  elements.unshift(backgroundRect); // Add at beginning so it's behind other elements\n\n  return elements;\n}\n\n/**\n * Creates app state based on style\n */\nfunction createAppStateFromStyle(style: string): Partial<ExcalidrawAppState> {\n  const baseState = {\n    viewBackgroundColor: getColorForStyle(style, 'canvas'),\n    gridSize: 20,\n    theme: style === 'technical' ? 'dark' : 'light' as const,\n    exportBackground: true,\n    exportWithDarkMode: style === 'technical',\n  };\n\n  return baseState;\n}\n\n/**\n * Gets colors based on video style\n */\nfunction getColorForStyle(style: string, type: 'primary' | 'secondary' | 'background' | 'border' | 'canvas'): string {\n  const colorSchemes = {\n    educational: {\n      primary: COLOR_PALETTE.blue,\n      secondary: COLOR_PALETTE.black,\n      background: COLOR_PALETTE.white,\n      border: COLOR_PALETTE.blue,\n      canvas: COLOR_PALETTE.white,\n    },\n    business: {\n      primary: COLOR_PALETTE.indigo,\n      secondary: COLOR_PALETTE.black,\n      background: '#f8f9fa',\n      border: COLOR_PALETTE.indigo,\n      canvas: '#f8f9fa',\n    },\n    motivational: {\n      primary: COLOR_PALETTE.orange,\n      secondary: COLOR_PALETTE.black,\n      background: COLOR_PALETTE.yellow,\n      border: COLOR_PALETTE.orange,\n      canvas: '#fffef7',\n    },\n    technical: {\n      primary: COLOR_PALETTE.green,\n      secondary: COLOR_PALETTE.white,\n      background: '#2d3748',\n      border: COLOR_PALETTE.green,\n      canvas: '#1a202c',\n    },\n  };\n\n  const scheme = colorSchemes[style as keyof typeof colorSchemes] || colorSchemes.educational;\n  return scheme[type];\n}\n\n/**\n * Converts single scene to Excalidraw data\n */\nexport function convertSceneToExcalidraw(\n  scene: SceneData,\n  style: string = 'educational'\n): ExcalidrawFile {\n  const elements = createElementsFromScene(scene, style);\n  const appState = createAppStateFromStyle(style);\n  \n  return createExcalidrawFile(elements, appState, {});\n}\n\n/**\n * Creates a simple diagram from text data\n */\nexport function createDiagramFromText(\n  title: string,\n  items: string[],\n  style: string = 'educational'\n): ExcalidrawFile {\n  const elements: ExcalidrawElement[] = [];\n  \n  // Title\n  const titleElement = newTextElement({\n    x: 960 - (title.length * 8), // Center approximately\n    y: 100,\n    text: title,\n    fontSize: 28,\n    fontFamily: 5,\n    strokeColor: getColorForStyle(style, 'primary'),\n  });\n  elements.push(titleElement);\n  \n  // Items as boxes with arrows\n  const startY = 200;\n  const itemHeight = 80;\n  const itemWidth = 300;\n  const spacing = 120;\n  \n  items.forEach((item, index) => {\n    const y = startY + (index * spacing);\n    \n    // Box\n    const boxElement = newRectangleElement({\n      x: 400,\n      y: y,\n      width: itemWidth,\n      height: itemHeight,\n      strokeColor: getColorForStyle(style, 'border'),\n      backgroundColor: getColorForStyle(style, 'background'),\n      fillStyle: 'solid',\n    });\n    elements.push(boxElement);\n    \n    // Text inside box\n    const textElement = newTextElement({\n      x: 420,\n      y: y + 25,\n      text: item,\n      fontSize: 16,\n      fontFamily: 5,\n      strokeColor: getColorForStyle(style, 'secondary'),\n    });\n    elements.push(textElement);\n    \n    // Arrow to next item (except for last)\n    if (index < items.length - 1) {\n      const arrowElement = newArrowElement({\n        x: 550,\n        y: y + itemHeight,\n        points: [pointFrom(0, 0), pointFrom(0, 40)],\n        strokeColor: getColorForStyle(style, 'primary'),\n        strokeWidth: 3,\n      });\n      elements.push(arrowElement);\n    }\n  });\n  \n  const appState = createAppStateFromStyle(style);\n  return createExcalidrawFile(elements, appState, {});\n}\n\n/**\n * Utility to batch convert multiple analysis files\n */\nexport function batchConvertAnalysis(\n  analysisFiles: AnalysisJson[]\n): { filename: string; excalidrawData: ExcalidrawFile[] }[] {\n  return analysisFiles.map((analysis, index) => ({\n    filename: `scene-${index + 1}-${analysis.metadata.title.replace(/\\s+/g, '-').toLowerCase()}`,\n    excalidrawData: convertAnalysisToExcalidraw(analysis),\n  }));\n}\n\n/**\n * Export configuration for different video styles\n */\nexport const STYLE_CONFIGURATIONS = {\n  educational: {\n    defaultFont: 5, // Excalifont\n    titleSize: 32,\n    contentSize: 20,\n    spacing: 60,\n    theme: 'light' as const,\n  },\n  business: {\n    defaultFont: 2, // Helvetica\n    titleSize: 28,\n    contentSize: 18,\n    spacing: 50,\n    theme: 'light' as const,\n  },\n  motivational: {\n    defaultFont: 7, // Lilita One\n    titleSize: 36,\n    contentSize: 22,\n    spacing: 70,\n    theme: 'light' as const,\n  },\n  technical: {\n    defaultFont: 3, // Cascadia\n    titleSize: 24,\n    contentSize: 16,\n    spacing: 40,\n    theme: 'dark' as const,\n  },\n};